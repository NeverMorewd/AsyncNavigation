using AsyncNavigation.Abstractions;
using AsyncNavigation.Core;
using Avalonia.Controls;
using Avalonia.Controls.Templates;
using Microsoft.Extensions.DependencyInjection;

namespace AsyncNavigation.Avalonia;

internal class RegionIndicatorManager : IRegionIndicatorManager<ContentControl>
{
    private readonly IDataTemplate? _loadingTemplate;
    private readonly IDataTemplate? _errorTemplate;
    private readonly IServiceProvider _serviceProvider;
    private ContentControl? _indicatorContainer;

    public RegionIndicatorManager(IServiceProvider serviceProvider)
    {
        _serviceProvider = serviceProvider;

        if (NavigationOptions.EnableLoadingIndicator)
        {
            _loadingTemplate = _serviceProvider.GetKeyedService<IDataTemplate>(NavigationConstants.INDICATOR_LOADING_KEY);
        }
        if (NavigationOptions.EnableErrorIndicator)
        {
            _errorTemplate = _serviceProvider.GetKeyedService<IDataTemplate>(NavigationConstants.INDICATOR_ERROR_KEY);
        }
    }

    /// <summary>
    /// Sets up a singleton indicator control, suitable for fixed area loading/error display.
    /// Creates the singleton control if it does not exist, and assigns it to the navigation context's Indicator.
    /// </summary>
    public ContentControl SetupSingletonIndicator(NavigationContext navigationContext)
    {
        _indicatorContainer ??= new ContentControl();
        navigationContext.Indicator.Value = _indicatorContainer;
        return _indicatorContainer;
    }

    /// <summary>
    /// Creates a new indicator control each time it is called, avoiding Visual Parent conflicts.
    /// Suitable for dynamically generated indicators with a short lifecycle.
    /// </summary>
    public ContentControl SetupIndicator(NavigationContext navigationContext)
    {
        var indicator = new ContentControl();
        navigationContext.Indicator.Value = indicator;
        return indicator;
    }

    /// <summary>
    /// Shows content; can be custom content or generated by the loading template.
    /// </summary>
    public Task ShowContentAsync(NavigationContext navigationContext, object content, CancellationToken cancellationToken = default)
    {
        if (!NavigationOptions.EnableLoadingIndicator)
            return Task.CompletedTask;

        var displayContent = content ?? _loadingTemplate?.Build(navigationContext.WithStatus(NavigationStatus.InProgress));
        SetIndicatorContent(navigationContext, displayContent);
        return Task.CompletedTask;
    }

    /// <summary>
    /// Shows an error indicator; content is generated by the error template.
    /// </summary>
    public Task ShowErrorAsync(NavigationContext navigationContext, Exception exception, CancellationToken cancellationToken = default)
    {
        if (!NavigationOptions.EnableErrorIndicator)
            return Task.CompletedTask;

        var errorContent = _errorTemplate?.Build(navigationContext.WithStatus(NavigationStatus.Failed, exception));
        SetIndicatorContent(navigationContext, errorContent);
        return Task.CompletedTask;
    }

    /// <summary>
    /// Shows a loading indicator; content is generated by the loading template.
    /// </summary>
    public Task ShowLoadingAsync(NavigationContext navigationContext, CancellationToken cancellationToken = default)
    {
        if (!NavigationOptions.EnableLoadingIndicator)
            return Task.CompletedTask;

        var loadingContent = _loadingTemplate?.Build(navigationContext.WithStatus(NavigationStatus.InProgress));
        SetIndicatorContent(navigationContext, loadingContent);
        return Task.CompletedTask;
    }

    public async Task DelayShowLoadingAsync(NavigationContext navigationContext, 
        Task processTask, 
        CancellationToken cancellationToken = default)
    {
        if (NavigationOptions.EnableLoadingIndicator)
        {
            var loadingContent = _loadingTemplate?.Build(navigationContext.WithStatus(NavigationStatus.InProgress));
            var delayTask = Task.Delay(NavigationOptions.LoadingIndicatorDelay, cancellationToken);
            if (await Task.WhenAny(processTask, delayTask) == delayTask && !processTask.IsCompleted)
            {
                SetIndicatorContent(navigationContext, loadingContent);
            }
        }
    }

    /// <summary>
    /// Private helper method to set the content of the indicator control in the navigation context.
    /// </summary>
    private void SetIndicatorContent(NavigationContext navigationContext, object? content)
    {
        if (navigationContext.Indicator.IsSet && navigationContext.Indicator.Value is ContentControl indicatorContainer)
        {
            indicatorContainer.Content = content;
        }
    }
}
